# Database for the storage of all the run time status(s)

import inspect 

solverStatus = []	# identifier to all solver status
timeStamp  = []		# identifier for all the timing : functions and modules

dictOptions = {}	# common repository for all the status set(s)

# solver class: solver based formulation setup
class solverStat:		
	def __init__(self):
		pass
		
	def __del__(self):
		pass	
			
	def solverAddStatus(self,argChar,status):
		solverStatus.append(argChar)
		dictOptions[argChar] = status
		
	def solverTimeStamp(self,argChar,status):
		timeStamp.append(argChar)
		dictOptions[argChar] = status
	
	def solverFindStatus(self,argChar):
		print dictOptions[argChar]	


# returns the line number where the function is called		
def lineno():
	return inspect.currentframe().f_back.f_lineno		

def insertStatus(filename,lineNo,keyString,statusString):
	solve = solverStat()
	statusData = "["+filename + ":" + str(lineNo) + "]  " + statusString
	solve.solverAddStatus(keyString,statusData)
	
def insertTimeStamp(filename,lineno,keyString,statusString):
	solve = solverStat()
	statusData = "["+filename + ":" + str(lineno) + "]  " + statusString	
	solve.solverTimeStamp(keyString,statusData)
	
def reportStatus(argStat):
	print "\n GENERATION REPORT :",argStat
	if argStat == 'solver':
		for i in range(len(solverStatus)):
			identifier = solverStatus[i]
			print dictOptions[identifier]
	if argStat == 'timer':
		for i in range(len(timeStamp)):
			identifier = timeStamp[i]
			print dictOptions[identifier]		


#print "this is line", lineno()
#print ('this is generated by ' + filename)

# file name stored : filename 
#filename = os.path.basename(__file__)

# Error Module framework for Design Framework :                               time python ex5.py >mytxt.txt
# Switch Case Based Framework Using Python : Error Mode Op Mode Framework

#def func():
#    print "error1.\n"

#options = { 'err1' : func}

#def errStat(argChar):
#	options[argChar]()

#errStat('err1')
